#include <ESP8266WiFi.h>         
#include <PubSubClient.h>        
#include <DHT.h>                 
#include <ArduinoJson.h>         

// Th√¥ng tin WiFi
// const char* ssid = "Haito";    
// const char* password = "igpr6781";
const char* ssid = "XL-P204";    
const char* password = "0982417272";

// Th√¥ng tin MQTT
const char* mqtt_server = "192.168.24.3";
const int mqtt_port = 1999;
const char* mqtt_user = "VietLong"; 
const char* mqtt_pass = "123456"; 

// Khai b√°o c√°c ch√¢n k·∫øt n·ªëi
#define DHTPIN D4   // Ch√¢n DHT11 (GPIO2)
#define DHTTYPE DHT11
#define LDR_PIN A0  // Ch√¢n c·∫£m bi·∫øn √°nh s√°ng
#define LED_D1 D1   // Ch√¢n LED 1
#define LED_D2 D2   // Ch√¢n LED 2
#define LED_D3 D3   // Ch√¢n LED 3
#define LED_TEMP_ALERT D6  // Ch√¢n c·∫£nh b√°o nhi·ªát ƒë·ªô
#define LED_HUMID_ALERT D7 // Ch√¢n c·∫£nh b√°o ƒë·ªô ·∫©m
#define LED_LIGHT_ALERT D8 // Ch√¢n c·∫£nh b√°o √°nh s√°ng

// Ng∆∞·ª°ng c·∫£nh b√°o
#define TEMP_THRESHOLD_HIGH 30.0  // Nhi·ªát ƒë·ªô cao c·∫£nh b√°o
#define HUMID_THRESHOLD_HIGH 80.0 // ƒê·ªô ·∫©m cao c·∫£nh b√°o
#define LIGHT_THRESHOLD_HIGH 600   // √Ånh s√°ng cao c·∫£nh b√°o

// Bi·∫øn tr·∫°ng th√°i c·∫£nh b√°o
bool tempAlert = false;
bool humidAlert = false;
bool lightAlert = false;

unsigned long previousMillis = 0;
const long blinkInterval = 500; // T·ªëc ƒë·ªô nh·∫•p nh√°y (ms)

// Khai b√°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·∫°ng th√°i ƒë√®n
bool den1State = false;
bool den2State = false;
bool den3State = false;

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

// K·∫øt n·ªëi WiFi
void setup_wifi() {
  Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" ƒê√£ k·∫øt n·ªëi WiFi!");
}

// H√†m ƒë·ªçc tr·∫°ng th√°i ƒë√®n hi·ªán t·∫°i v√† g·ª≠i v·ªÅ server
void publishLedStates() {
  // ƒê·ªçc tr·∫°ng th√°i hi·ªán t·∫°i
  den1State = digitalRead(LED_D1) == HIGH;
  den2State = digitalRead(LED_D2) == HIGH;
  den3State = digitalRead(LED_D3) == HIGH;
  
  // T·∫°o JSON ch·ª©a tr·∫°ng th√°i ƒë√®n
  StaticJsonDocument<256> ledDoc;
  ledDoc["den1"] = den1State ? "B·∫≠t" : "T·∫Øt";
  ledDoc["den2"] = den2State ? "B·∫≠t" : "T·∫Øt";
  ledDoc["den3"] = den3State ? "B·∫≠t" : "T·∫Øt";
  ledDoc["tempAlert"] = tempAlert;
  ledDoc["humidAlert"] = humidAlert;
  ledDoc["lightAlert"] = lightAlert;
  
  char ledBuffer[256];
  serializeJson(ledDoc, ledBuffer);
  
  // G·ª≠i tr·∫°ng th√°i ƒë√®n v·ªÅ server
  client.publish("esp8266/led_status", ledBuffer);
  Serial.print("G·ª≠i tr·∫°ng th√°i ƒë√®n: ");
  Serial.println(ledBuffer);
}

void controlLED(int pin, bool state) {
  digitalWrite(pin, state ? HIGH : LOW);
  Serial.printf("ƒê√®n tr√™n ch√¢n %d ƒë√£ ƒë∆∞·ª£c %s\n", pin, state ? "B·∫≠t" : "T·∫Øt");
  delay(100); // Th√™m ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o ph·∫ßn c·ª©ng ƒë√£ c·∫≠p nh·∫≠t
  publishLedStates(); // G·ª≠i tr·∫°ng th√°i m·ªõi th·ª±c t·∫ø
}
// X·ª≠ l√Ω tin nh·∫Øn MQTT nh·∫≠n ƒë∆∞·ª£c

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Nh·∫≠n t·ª´ MQTT: ");
  Serial.print(topic);
  Serial.print(" - Gi√° tr·ªã: ");

  String msg = "";
  for (int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }
  Serial.println(msg);

  int state = msg.toInt();  // Chuy·ªÉn chu·ªói "0" ho·∫∑c "1" th√†nh s·ªë

  if (strcmp(topic, "esp/den1") == 0) {
    controlLED(LED_D1, state);
  }
  else if (strcmp(topic, "esp/den2") == 0) {
    controlLED(LED_D2, state);
  }
  else if (strcmp(topic, "esp/den3") == 0) {
    controlLED(LED_D3, state);
  }
  else if (strcmp(topic, "esp/full") == 0) {
    controlLED(LED_D1, state);
    controlLED(LED_D2, state);
    controlLED(LED_D3, state);
  }
}

// K·∫øt n·ªëi l·∫°i MQTT n·∫øu m·∫•t k·∫øt n·ªëi
void reconnect() {
  while (!client.connected()) {
    Serial.print("ƒêang k·∫øt n·ªëi MQTT...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      Serial.println(" Th√†nh c√¥ng!");
      client.subscribe("esp/den1");
      client.subscribe("esp/den2");
      client.subscribe("esp/den3");
      client.subscribe("esp/full");
    } else {
      Serial.print(" L·ªói, m√£: ");
      Serial.print(client.state());
      Serial.println(" Th·ª≠ l·∫°i sau 5s...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  pinMode(LED_D1, OUTPUT);
  pinMode(LED_D2, OUTPUT);
  pinMode(LED_D3, OUTPUT);
  pinMode(LED_TEMP_ALERT, OUTPUT);
  pinMode(LED_HUMID_ALERT, OUTPUT);
  pinMode(LED_LIGHT_ALERT, OUTPUT);

  digitalWrite(LED_D1, LOW);
  digitalWrite(LED_D2, LOW);
  digitalWrite(LED_D3, LOW);
  digitalWrite(LED_TEMP_ALERT, LOW);
  digitalWrite(LED_HUMID_ALERT, LOW);
  digitalWrite(LED_LIGHT_ALERT, LOW);

  dht.begin();
  delay(100);
  publishLedStates();
}

// Bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian g·ª≠i tr·∫°ng th√°i ƒë√®n
unsigned long lastLedStatusUpdate = 0;
const long ledStatusInterval = 2000;
unsigned long previousSensorUpdate = 0;
const long sensorInterval = 2000; // G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn m·ªói 2 gi√¢y

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long currentMillis = millis();

  // X·ª≠ l√Ω nh·∫•p nh√°y ƒë√®n c·∫£nh b√°o
  if (currentMillis - previousMillis >= blinkInterval) {
    previousMillis = currentMillis;
    
    // Nh·∫•p nh√°y ƒë√®n c·∫£nh b√°o nhi·ªát ƒë·ªô
    if (tempAlert) {
      digitalWrite(LED_TEMP_ALERT, !digitalRead(LED_TEMP_ALERT));
    } else {
      digitalWrite(LED_TEMP_ALERT, LOW);
    }
    
    // Nh·∫•p nh√°y ƒë√®n c·∫£nh b√°o ƒë·ªô ·∫©m
    if (humidAlert) {
      digitalWrite(LED_HUMID_ALERT, !digitalRead(LED_HUMID_ALERT));
    } else {
      digitalWrite(LED_HUMID_ALERT, LOW);
    }
    
    // Nh·∫•p nh√°y ƒë√®n c·∫£nh b√°o √°nh s√°ng
    if (lightAlert) {
      digitalWrite(LED_LIGHT_ALERT, !digitalRead(LED_LIGHT_ALERT));
    } else {
      digitalWrite(LED_LIGHT_ALERT, LOW);
    }
  }

  // G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn m·ªói 3 gi√¢y
  if (currentMillis - previousSensorUpdate >= sensorInterval) {
    previousSensorUpdate = currentMillis;

    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int lightValue = analogRead(LDR_PIN);

    if (!isnan(temperature) && !isnan(humidity)) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·∫£nh b√°o
      
      // Nhi·ªát ƒë·ªô c·∫£nh b√°o khi >= ng∆∞·ª°ng cao
      if (temperature >= TEMP_THRESHOLD_HIGH) {
        tempAlert = true;
      } else {
        tempAlert = false;
      }

      // ƒê·ªô ·∫©m c·∫£nh b√°o khi >= ng∆∞·ª°ng cao, t·∫Øt khi d∆∞·ªõi ng∆∞·ª°ng
      if (humidity >= HUMID_THRESHOLD_HIGH) {
        humidAlert = true;
      } else {
        humidAlert = false;
      }

      // √Ånh s√°ng c·∫£nh b√°o khi > ng∆∞·ª°ng cao, t·∫Øt khi <= ng∆∞·ª°ng
      if (lightValue > LIGHT_THRESHOLD_HIGH) {
        lightAlert = true;
      } else {
        lightAlert = false;
      }

      // T·∫°o JSON g·ª≠i d·ªØ li·ªáu
      StaticJsonDocument<200> sensorDoc;
      sensorDoc["temperature"] = temperature;
      sensorDoc["humidity"] = humidity;
      sensorDoc["light"] = lightValue;

      char sensorBuffer[200];
      serializeJson(sensorDoc, sensorBuffer);

      // G·ª≠i d·ªØ li·ªáu l√™n topic esp8266/dulieu
      client.publish("esp8266/dulieu", sensorBuffer);
      Serial.print("üì§ G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn: ");
      Serial.println(sensorBuffer);
    } else {
      Serial.println("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn DHT");
    }
  }
}


