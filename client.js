const mqtt = require('mqtt');
const db = require('./config/db');

// C·∫•u h√¨nh MQTT
const mqttOptions = {
  host: '192.168.24.3',
  port: 1999,
  username: 'VietLong',
  password: '123456'
};

const SENSOR_TOPIC = 'esp8266/dulieu';
const LED_TOPIC = 'esp8266/led_status';

// K·∫øt n·ªëi ƒë·∫øn MQTT Broker
const client = mqtt.connect(mqttOptions);

// Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ƒë√®n
const ledStatus = {
  den1: 'T·∫Øt',
  den2: 'T·∫Øt',
  den3: 'T·∫Øt',
  tempAlert: false,
  humidAlert: false,
  lightAlert: false
};

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n t·ª´ server g·ª≠i l·ªánh (n·∫øu c·∫ßn d√πng ·ªü n∆°i kh√°c)
function updateLedStatus(led, state) {
  if (led === 'full') {
    ['den1', 'den2', 'den3'].forEach(d => {
      ledStatus[d] = state ? 'B·∫≠t' : 'T·∫Øt';
    });
  } else if (ledStatus.hasOwnProperty(led)) {
    ledStatus[led] = state ? 'B·∫≠t' : 'T·∫Øt';
  }
}

// H√†m tr·∫£ v·ªÅ tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ d√πng ·ªü n∆°i kh√°c (nh∆∞ API frontend)
function getLedStatus() {
  return ledStatus;
}

// S·ª± ki·ªán khi k·∫øt n·ªëi th√†nh c√¥ng
client.on('connect', () => {
  console.log('üì° MQTT ƒë√£ k·∫øt n·ªëi');
  client.subscribe([SENSOR_TOPIC, LED_TOPIC], (err) => {
    if (err) console.error('‚ùå L·ªói khi subscribe:', err);
    else console.log(`‚úÖ Subscribed c√°c topic: ${SENSOR_TOPIC}, ${LED_TOPIC}`);
  });
});

// X·ª≠ l√Ω khi c√≥ d·ªØ li·ªáu m·ªõi t·ª´ MQTT
client.on('message', (topic, message) => {
  try {
    const payload = JSON.parse(message.toString());

    if (topic === SENSOR_TOPIC) {
      const { temperature, humidity, light } = payload;
      const timestamp = new Date();

      if (
        typeof temperature === 'number' &&
        typeof humidity === 'number' &&
        typeof light === 'number'
      ) {
        const sql = `
          INSERT INTO sensor_data (temperature, humidity, light, time)
          VALUES (?, ?, ?, ?)
        `;
        db.query(sql, [temperature, humidity, light, timestamp], (err, result) => {
          if (err) console.error('‚ùå L·ªói l∆∞u sensor:', err);
          else console.log(`‚úÖ D·ªØ li·ªáu ƒë√£ l∆∞u (ID: ${result.insertId})`);
        });
      } else {
        console.warn('‚ö†Ô∏è Sensor data kh√¥ng h·ª£p l·ªá:', payload);
      }
    }

    if (topic === LED_TOPIC) {
      const { den1, den2, den3, tempAlert, humidAlert, lightAlert } = payload;

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i led hi·ªán t·∫°i
      ledStatus.den1 = den1 || 'T·∫Øt';
      ledStatus.den2 = den2 || 'T·∫Øt';
      ledStatus.den3 = den3 || 'T·∫Øt';
      ledStatus.tempAlert = !!tempAlert;
      ledStatus.humidAlert = !!humidAlert;
      ledStatus.lightAlert = !!lightAlert;

      console.log('üí° Tr·∫°ng th√°i ƒë√®n c·∫≠p nh·∫≠t:', ledStatus);
    }
  } catch (err) {
    console.error('‚ùå L·ªói parse JSON MQTT:', err.message);
  }
});

// Export cho ph·∫ßn kh√°c c·ªßa h·ªá th·ªëng s·ª≠ d·ª•ng
module.exports = {
  client,
  ledStatus,
  updateLedStatus,
  getLedStatus
};
