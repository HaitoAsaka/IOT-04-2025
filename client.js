// client.js ‚Äì K·∫øt n·ªëi MQTT v√† l∆∞u d·ªØ li·ªáu c·∫£m bi·∫øn + tr·∫°ng th√°i ƒë√®n v√†o DB
const mqtt = require('mqtt');
const db = require('./config/db');
const mqttAckCallbacks = require('./mqttCallbacks'); // Import ƒë√∫ng c√°ch

// C·∫•u h√¨nh MQTT
const mqttOptions = {
  host: '192.168.24.3',
  port: 1999,
  username: 'VietLong',
  password: '123456'
};

const client = mqtt.connect(mqttOptions);

// C√°c topic c·∫ßn subscribe
const sensorTopic = 'esp8266/dulieu';
const ledStatusTopic = 'esp8266/led_status';

// L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ƒë√®n
const ledStatus = {
  den1: 0,
  den2: 0,
  den3: 0
};

// Kh·ªüi t·∫°o tr·∫°ng th√°i ƒë√®n m·ªõi nh·∫•t m·∫∑c ƒë·ªãnh (ban ƒë·∫ßu ch∆∞a c√≥ d·ªØ li·ªáu)
let ledStatusLatest = {
  den1: 'T·∫Øt',
  den2: 'T·∫Øt',
  den3: 'T·∫Øt',
  tempAlert: false,
  humidAlert: false,
  lightAlert: false,
  lastUpdated: null
};

// H√†m chu·∫©n h√≥a tr·∫°ng th√°i ƒë√®n
function normalizeLedState(value) {
  // N·∫øu gi√° tr·ªã l√† s·ªë 1, chu·ªói "1", chu·ªói "B·∫≠t" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng), ho·∫∑c true th√¨ tr·∫£ "B·∫≠t"
  if (
    value === 1 ||
    value === '1' ||
    (typeof value === 'string' && value.toLowerCase() === 'b·∫≠t') ||
    value === true
  ) {
    return 'B·∫≠t';
  }
  // Ng∆∞·ª£c l·∫°i tr·∫£ "T·∫Øt"
  return 'T·∫Øt';
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n khi server g·ª≠i l·ªánh
function updateLedStatus(led, state) {
  if (led === 'full') {
    ['den1', 'den2', 'den3'].forEach((d) => {
      ledStatus[d] = state;
    });
  } else if (ledStatus.hasOwnProperty(led)) {
    ledStatus[led] = state;
  }
}

client.on('connect', () => {
  console.log('üì° ƒê√£ k·∫øt n·ªëi MQTT');
  client.subscribe([sensorTopic, ledStatusTopic], (err) => {
    if (err) {
      console.error('‚ùå L·ªói subscribe:', err);
    } else {
      console.log(`‚úÖ Subscribed: ${sensorTopic}, ${ledStatusTopic}`);
    }
  });
});

client.on('message', (topic, message) => {
  const msg = message.toString();
  console.log(`[MQTT] Nh·∫≠n tr√™n topic ${topic}:`, msg);

  // X·ª≠ l√Ω d·ªØ li·ªáu c·∫£m bi·∫øn
  if (topic === sensorTopic) {
    try {
      const data = JSON.parse(msg);
      const { temperature, humidity, light } = data;
      const timestamp = new Date();

      if (
        typeof temperature === 'number' &&
        typeof humidity === 'number' &&
        typeof light === 'number'
      ) {
        const sql = `
          INSERT INTO sensor_data (temperature, humidity, light, time)
          VALUES (?, ?, ?, ?)
        `;
        db.query(sql, [temperature, humidity, light, timestamp], (err, result) => {
          if (err) {
            console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu c·∫£m bi·∫øn:', err);
          } else {
            console.log(`‚úÖ ƒê√£ l∆∞u c·∫£m bi·∫øn (ID: ${result.insertId})`);
          }
        });
      } else {
        console.warn('‚ö†Ô∏è D·ªØ li·ªáu c·∫£m bi·∫øn kh√¥ng h·ª£p l·ªá:', data);
      }
    } catch (err) {
      console.error('‚ùå L·ªói khi parse JSON c·∫£m bi·∫øn:', err.message);
    }
    return;
  }

  // X·ª≠ l√Ω tr·∫°ng th√°i ƒë√®n t·ª´ ESP8266
  if (topic === ledStatusTopic) {
    try {
      const ledData = JSON.parse(msg);

      if (
        ledData &&
        typeof ledData === 'object' &&
        'den1' in ledData &&
        'den2' in ledData &&
        'den3' in ledData
      ) {
        // Chu·∫©n h√≥a tr·∫°ng th√°i ƒë√®n
        ledStatusLatest = {
          den1: normalizeLedState(ledData.den1),
          den2: normalizeLedState(ledData.den2),
          den3: normalizeLedState(ledData.den3),
          tempAlert: ledData.tempAlert ?? false,
          humidAlert: ledData.humidAlert ?? false,
          lightAlert: ledData.lightAlert ?? false,
          lastUpdated: new Date()
        };

        console.log('üí° Tr·∫°ng th√°i ƒë√®n m·ªõi nh·∫•t:', ledStatusLatest);

        // G·ªçi callback cho t·ª´ng ƒë√®n n·∫øu c√≥, truy·ªÅn tr·∫°ng th√°i ƒë√£ chu·∫©n h√≥a
        ['den1', 'den2', 'den3'].forEach((led) => {
          if (
            mqttAckCallbacks[led] &&
            typeof mqttAckCallbacks[led].resolve === 'function'
          ) {
            const resolvedStatus = normalizeLedState(ledData[led]); // chu·∫©n h√≥a
            console.log(`üü¢ G·ªçi callback cho ${led} v·ªõi gi√° tr·ªã chu·∫©n h√≥a:`, resolvedStatus);
            mqttAckCallbacks[led].resolve(resolvedStatus);
            clearTimeout(mqttAckCallbacks[led].timeoutId);
            delete mqttAckCallbacks[led];
          } else if (mqttAckCallbacks[led]) {
            console.error(`‚ùå L·ªói callback cho ${led}:`, mqttAckCallbacks[led]);
          }
        });
      } else {
        console.warn('‚ö†Ô∏è D·ªØ li·ªáu tr·∫°ng th√°i ƒë√®n kh√¥ng h·ª£p l·ªá:', ledData);
      }
    } catch (err) {
      console.error('‚ùå L·ªói khi parse JSON tr·∫°ng th√°i ƒë√®n:', err.message);
      console.error('Payload nh·∫≠n ƒë∆∞·ª£c:', msg);
    }
    return;
  }
});

// Export cho c√°c file kh√°c d√πng
module.exports = {
  client,
  ledStatus,
  updateLedStatus,
  ledStatusLatest
};
